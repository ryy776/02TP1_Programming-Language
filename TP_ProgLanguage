###########
#  LEXER  #
###########

# Token types
# EOF (end-of-file) token is used to indicate that
# there is no more input left for lexical analysis
(INTEGER, REAL, INTEGER_CONST, REAL_CONST, PLUS, MINUS, MUL, INTEGER_DIV, 
 FLOAT_DIV, LPAREN, RPAREN, ID, ASSIGN, BEGIN, END, SEMI, DOT, PROGRAM, 
 VAR, COLON, COMMA, EOF) = (
    'INTEGER', 'REAL', 'INTEGER_CONST', 'REAL_CONST', 'PLUS', 'MINUS', 
    'MUL', 'INTEGER_DIV', 'FLOAT_DIV', '(', ')', 'ID', 'ASSIGN', 'BEGIN', 
    'END', 'SEMI', 'DOT', 'PROGRAM', 'VAR', ':', ',', 'EOF'
)

class Token(object):
    def __init__(self, type, value):
        self.type = type
        self.value = value

    def __str__(self):
        """String representation of the class instance.

         Examples:
            Token(INTEGER, 3)
            Token(PLUS, '+')
            Token(MUL, '*')
        """
        return f'Token({self.type}, {repr(self.value)})'

    def __repr__(self):
        return self.__str__()


RESERVED_KEYWORDS = {
    'PROGRAM': Token('PROGRAM', 'PROGRAM'),
    'VAR': Token('VAR', 'VAR'),
    'DIV': Token('INTEGER_DIV', 'DIV'),
    'INTEGER': Token('INTEGER', 'INTEGER'),
    'REAL': Token('REAL', 'REAL'),
    'BEGIN': Token('BEGIN', 'BEGIN'),
    'END': Token('END', 'END'),
}


class Lexer(object):
    def __init__(self, text):
        # client string input, e.g. "3 * 5", "12 / 3 * 4", etc
        self.text = text
        # self.pos is an index into self.text
        self.pos = 0
        self.current_char = self.text[self.pos]

    def error(self):
        raise Exception('Invalid character')

    def advance(self):
        """Advance the `pos` pointer and set the `current_char` variable."""
        self.pos += 1
        if self.pos > len(self.text) - 1:
            self.current_char = None
        else:
            self.current_char = self.text[self.pos]
            
    def peek(self):
        peek_pos = self.pos + 1
        if peek_pos > len(self.text) - 1:
            return None
        else:
            return self.text[peek_pos]

    def skip_whitespace(self):
        while self.current_char is not None and self.current_char.isspace():
            self.advance()
            
    def skip_comment(self):
        while self.current_char != '}':
            self.advance()
        self.advance()

    def number(self):
        result = ''
        while self.current_char is not None and self.current_char.isdigit():
            result += self.current_char
            self.advance()
            
        if self.current_char == '.':
            result += self.current_char
            self.advance()
            while self.current_char is not None and self.current_char.isdigit():
                result += self.current_char
                self.advance()
            return Token(REAL_CONST, float(result))
            
        return Token(INTEGER_CONST, int(result))
        
    def _id(self):
        """Handle identifiers and reserved keywords"""
        result = ''
        while self.current_char is not None and self.current_char.isalnum():
            result += self.current_char
            self.advance()

        return RESERVED_KEYWORDS.get(result.upper(), Token(ID, result))

    def get_next_token(self):
        """Lexical analyzer (also known as scanner or tokenizer)

        This method is responsible for breaking a sentence
        apart into tokens. One token at a time.
        """
        while self.current_char:
            if self.current_char.isspace():
                self.skip_whitespace()
                continue
            
            if self.current_char == '{':
                self.advance()
                self.skip_comment()
                continue
            
            if self.current_char.isalpha():
                return self._id()
            
            if self.current_char.isdigit():
                return self.number()
            
            if self.current_char == ':' and self.peek() == '=':
                self.advance()
                self.advance()
                return Token('ASSIGN', ':=')
            
            if self.current_char == ':':
                self.advance()
                return Token('COLON', ':')
            
            if self.current_char == ';':
                self.advance()
                return Token('SEMI', ';')
            
            if self.current_char == ',':
                self.advance()
                return Token('COMMA', ',')
            
            if self.current_char == '.':
                self.advance()
                return Token('DOT', '.')
            
            if self.current_char == '+':
                self.advance()
                return Token('PLUS', '+')
            
            if self.current_char == '-':
                self.advance()
                return Token('MINUS', '-')
            
            if self.current_char == '*':
                self.advance()
                return Token('MUL', '*')
            
            if self.current_char == '/':
                self.advance()
                return Token('FLOAT_DIV', '/')
            
            if self.current_char == '(':
                self.advance()
                return Token('LPAREN', '(')
            
            if self.current_char == ')':
                self.advance()
                return Token('RPAREN', ')')
            
            raise Exception(f'Invalid character: {self.current_char}')
        
        return Token('EOF', None)


############
#  PARSER  #
############

class AST(object):
    pass

class BinOp(AST):
    def __init__(self, left, op, right):
        self.left = left
        self.op = op
        self.right = right

class Num(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value

class UnaryOp(AST):
    def __init__(self, op, expr):
        self.op = op
        self.expr = expr

class Compound(AST):
    def __init__(self):
        self.children = []

class Assign(AST):
    def __init__(self, left, op, right):
        self.left = left
        self.token = op
        self.right = right

class Var(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value

class NoOp(AST):
    pass

class Program(AST):
    def __init__(self, name, block):
        self.name = name
        self.block = block

class Block(AST):
    def __init__(self, declarations, compound_statement):
        self.declarations = declarations
        self.compound_statement = compound_statement

class VarDecl(AST):
    def __init__(self, var_node, type_node):
        self.var_node = var_node
        self.type_node = type_node

class Type(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value

class Parser(object):
    def __init__(self, lexer):
        self.lexer = lexer
        self.current_token = self.lexer.get_next_token()
        self.var_groups = []  # Track variable declaration groups
        # set current token to the first token taken from the input
        
    def error(self):
        raise Exception('Invalid syntax')

    def eat(self, token_type):
        # compare the current token type with the passed token
        # type and if they match then "eat" the current token
        # and assign the next token to the self.current_token,
        # otherwise raise an exception.
        if self.current_token.type == token_type:
            self.current_token = self.lexer.get_next_token()
        else:
            self.error()
            
    def program(self):
        """program : PROGRAM variable SEMI block DOT"""
        self.eat('PROGRAM')
        var_node = self.variable()
        prog_name = var_node.value
        self.eat('SEMI')
        block_node = self.block()
        self.eat('DOT')
        
        return Program(prog_name, block_node)

    def block(self):
        declarations = self.declarations()
        compound_statement = self.compound_statement()
        block_node = Block(declarations, compound_statement)
        # Attach the variable groups to the block for later use
        block_node.var_groups = self.var_groups
        return block_node
        
    def declarations(self):
        """declarations : VAR (variable_declaration SEMI)+ | empty"""
        declarations = []
        if self.current_token.type == 'VAR':
            self.eat('VAR')
            while self.current_token.type == 'ID':
                var_nodes = [Var(self.current_token)]
                self.eat('ID')
                while self.current_token.type == 'COMMA':
                    self.eat('COMMA')
                    var_nodes.append(Var(self.current_token))
                    self.eat('ID')
                
                self.eat('COLON')
                type_node = Type(self.current_token)
                self.eat(self.current_token.type)
                self.eat('SEMI')

                var_decls = []
                for var_node in var_nodes:
                    var_decl = VarDecl(var_node, type_node)
                    var_decls.append(var_decl)
                    declarations.append(var_decl)
                
                self.var_groups.append(var_decls)
                    
        return declarations

    def type_spec(self):
        """type_spec : INTEGER | REAL"""
        token = self.current_token
        if token.type == INTEGER:
            self.eat(INTEGER)
        else:
            self.eat(REAL)
        return Type(token)

    def compound_statement(self):
        """compound_statement: BEGIN statement_list END"""
        self.eat('BEGIN')
        nodes = self.statement_list()
        self.eat('END')
        compound = Compound()
        compound.children = nodes
        
        return compound
        
    def statement_list(self):
        """statement_list : statement | statement SEMI statement_list"""
        node = self.statement()
        results = [node]
        while self.current_token.type == 'SEMI':
            self.eat('SEMI')
            results.append(self.statement())
            
        return results

    def statement(self):
        """statement : compound_statement | assignment_statement | empty"""
        if self.current_token.type == 'BEGIN':
            return self.compound_statement()
        elif self.current_token.type == 'ID':
            return self.assignment_statement()
        return NoOp()
     
    def assignment_statement(self):
        """assignment_statement : variable ASSIGN expr"""
        left = self.variable()
        token = self.current_token
        self.eat(ASSIGN)
        right = self.expr()
        return Assign(left, token, right)

    def variable(self):
        """variable : ID"""
        node = Var(self.current_token)
        self.eat(ID)
        return node

    def empty(self):
        """An empty production"""
        return NoOp()

    def expr(self):
        """Arithmetic expression parser / interpreter.

        expr   : term ((PLUS | MINUS) term)*
        term   : factor ((MUL | DIV factor))
        factor : INTEGER | LPAREN expr RPAREN
        """
        node = self.term()
        while self.current_token.type in ('PLUS', 'MINUS'):
            token = self.current_token
            self.eat(token.type)
            node = BinOp(node, token, self.term())
            
        return node

    def term(self):
        """term : factor ((MUL | INTEGER_DIV | FLOAT_DIV) factor)*"""
        node = self.factor()
        while self.current_token.type in ('MUL', 'INTEGER_DIV', 'FLOAT_DIV'):
            token = self.current_token
            self.eat(token.type)
            node = BinOp(node, token, self.factor())
            
        return node

    def factor(self):
        """factor: PLUS factor
                 | MINUS factor
                 | INTEGER_CONST
                 | REAL_CONST
                 | LPAREN expr RPAREN
                 | variable
        """
        token = self.current_token
        if token.type in ('PLUS', 'MINUS'):
            self.eat(token.type)
            return UnaryOp(token, self.factor())
        elif token.type in ('INTEGER_CONST', 'REAL_CONST'):
            self.eat(token.type)
            return Num(token)
        elif token.type == 'LPAREN':
            self.eat('LPAREN')
            node = self.expr()
            self.eat('RPAREN')
            return node
        return self.variable()
    
    def parse(self):
        return self.program()


#################
#  INTERPRETER  #
#################

class Symbol:
    def __init__(self, name, type=None):
        self.name = name
        self.type = type
    
    def __str__(self):
        return f"<{self.name}:{self.type}>"
    
    def __repr__(self):
        return self.__str__()


class SymbolTable:
    def __init__(self):
        self._symbols = {}
        self._declaration_groups = []  
    
    def define(self, symbol):
        self._symbols[symbol.name] = symbol
    
    def define_group(self, symbols):
        group = []
        for symbol in symbols:
            self._symbols[symbol.name] = symbol
            group.append(symbol)
        self._declaration_groups.append(group)
    
    def lookup(self, name):
        return self._symbols.get(name)
    
    def __str__(self):
        symbols_str = "Symbols Table:\n"
        for group in self._declaration_groups:
            if len(group) == 1:
                symbol = group[0]
                symbols_str += f"{symbol.name} : {symbol.type};\n"
            else:
                var_names = ', '.join([s.name for s in group])
                symbols_str += f"{var_names} : {group[0].type};\n"
        
        return symbols_str.rstrip()
    
    def __repr__(self):
        return self.__str__()

class NodeVisitor(object):
    def visit(self, node):
        method_name = 'visit_' + type(node).__name__
        visitor = getattr(self, method_name, self.generic_visit)
        return visitor(node)

    def generic_visit(self, node):
        raise Exception(f'No visit_{type(node).__name__} method')

class SymbolTableBuilder(NodeVisitor):
    def __init__(self):
        self.symtab = SymbolTable()
        self.declaration_order = []  
    
    def visit_Program(self, node):
        self.visit(node.block)
    
    def visit_Block(self, node):
        if hasattr(node, 'var_groups'):
            for var_group in node.var_groups:
                symbols = []
                for var_decl in var_group:
                    var_symbol = Symbol(var_decl.var_node.value, var_decl.type_node.value)
                    if self.symtab.lookup(var_symbol.name):
                        raise Exception(f"Duplicate identifier '{var_symbol.name}'")
                    symbols.append(var_symbol)
                    self.declaration_order.append(var_symbol.name)
                self.symtab.define_group(symbols)
        
        self.visit(node.compound_statement)
    
    def visit_VarDecl(self, node):
        pass
    
    def visit_Compound(self, node):
        for child in node.children:
            self.visit(child)
    
    def visit_Assign(self, node):
        if self.symtab.lookup(node.left.value) is None:
            raise NameError(f"Semantic error: Identifier not found '{node.left.value}'")
        self.visit(node.right)
    
    def visit_Var(self, node):
        if self.symtab.lookup(node.value) is None:
            raise NameError(f"Semantic error: Identifier not found '{node.value}'")
    
    def visit_BinOp(self, node):
        self.visit(node.left)
        self.visit(node.right)
    
    def visit_Num(self, node):
        pass
    
    def visit_UnaryOp(self, node):
        self.visit(node.expr)
    
    def visit_NoOp(self, node):
        pass

class Interpreter(NodeVisitor):
    def __init__(self, tree):
        self.tree = tree
        self.GLOBAL_MEMORY = {}
    
    def interpret(self):
        self.visit(self.tree)
        return self.GLOBAL_MEMORY
    
    def visit_Program(self, node):
        self.visit(node.block)
    
    def visit_Block(self, node):
        for decl in node.declarations:
            self.visit(decl)
        self.visit(node.compound_statement)
    
    def visit_VarDecl(self, node):
        pass
    
    def visit_Type(self, node):
        pass
    
    def visit_Compound(self, node):
        for child in node.children:
            self.visit(child)
    
    def visit_Assign(self, node):
        self.GLOBAL_MEMORY[node.left.value] = self.visit(node.right)
    
    def visit_Var(self, node):
        val = self.GLOBAL_MEMORY.get(node.value)
        if val is None:
            raise NameError(f"Variable '{node.value}' is not defined")
        return val

    def visit_NoOp(self, node):
        pass
    
    def visit_BinOp(self, node):
        if node.op.type == PLUS:
            return self.visit(node.left) + self.visit(node.right)
        elif node.op.type == MINUS:
            return self.visit(node.left) - self.visit(node.right)
        elif node.op.type == MUL:
            return self.visit(node.left) * self.visit(node.right)
        elif node.op.type == INTEGER_DIV:
            return self.visit(node.left) // self.visit(node.right)
        elif node.op.type == FLOAT_DIV:
            return float(self.visit(node.left)) / float(self.visit(node.right))

    def visit_Num(self, node):
        return node.value

    def visit_UnaryOp(self, node):
        if node.op.type == PLUS:
            return +self.visit(node.expr)
        elif node.op.type == MINUS:
            return -self.visit(node.expr)

def main():
    text = """
    PROGRAM Part11;
    VAR
       number : INTEGER;
       a, b   : INTEGER;
       y      : REAL;

    BEGIN {Part11}
       number := 2;
       a := number ;
       b := 10 * a + 10 * number DIV 4;
       y := 20 / 7 + 3.14
    END.  {Part11}
    """
    
    lexer = Lexer(text)
    parser = Parser(lexer)
    tree = parser.parse()

    symtab_builder = SymbolTableBuilder()
    symtab_builder.visit(tree)
    print(symtab_builder.symtab)

    interpreter = Interpreter(tree)
    memory = interpreter.interpret()

    print("\nGLOBAL_MEMORY contents:")
    for var_name in symtab_builder.declaration_order:
        if var_name in memory:
            print(f"{var_name} = {memory[var_name]}")

if __name__ == '__main__':
    main()
